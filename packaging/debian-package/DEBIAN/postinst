#!/bin/bash
set -e

# Post-installation script for Podium CLI

echo "Setting up Podium development environment..."

# Create symlink to make podium command available
if [ ! -L /usr/local/bin/podium ]; then
    ln -sf /usr/local/share/podium-cli/podium /usr/local/bin/podium
fi

# Make sure podium script is executable
chmod +x /usr/local/share/podium-cli/podium

# Add current user to docker group (if not root)
if [ "$SUDO_USER" != "" ] && [ "$SUDO_USER" != "root" ]; then
    echo "Adding user $SUDO_USER to docker group..."
    usermod -aG docker "$SUDO_USER" || echo "Note: Could not add user to docker group. You may need to do this manually."
fi

# Enable and start Docker service
if systemctl is-enabled docker.service >/dev/null 2>&1; then
    echo "Docker service is already enabled"
else
    echo "Enabling Docker service..."
    systemctl enable docker.service || echo "Note: Could not enable Docker service"
fi

if systemctl is-active docker.service >/dev/null 2>&1; then
    echo "Docker service is already running"
else
    echo "Starting Docker service..."
    systemctl start docker.service || echo "Note: Could not start Docker service"
fi

# Create projects directory in the installation location
mkdir -p /usr/local/share/podium-cli/projects

# Set proper permissions
chown -R root:root /usr/local/share/podium-cli
chmod -R 755 /usr/local/share/podium-cli
chmod +x /usr/local/share/podium-cli/scripts/*.sh

# Set HOME if not set (common issue during package installation)
if [ -z "$HOME" ]; then
    if [ "$SUDO_USER" != "" ] && [ "$SUDO_USER" != "root" ]; then
        export HOME="/home/$SUDO_USER"
    else
        export HOME="/root"
    fi
fi

# Run minimal configuration setup (skip interactive parts)
echo "Running Podium environment setup..."
cd /usr/local/share/podium-cli

# Create docker-stack/.env if it doesn't exist
if [ ! -f docker-stack/.env ]; then
    cp docker-stack/env.example docker-stack/.env
    
    # Generate random network configuration
    STACK_ID=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 8)
    B_CLASS=$((RANDOM % 255 + 1))
    C_CLASS=$((RANDOM % 256))
    VPC_SUBNET="10.$B_CLASS.$C_CLASS"
    
    # Update .env file
    sed -i "s/#VPC_SUBNET=.*/VPC_SUBNET=$VPC_SUBNET/" docker-stack/.env
    sed -i "s/#STACK_ID=.*/STACK_ID=$STACK_ID/" docker-stack/.env
fi

# Set up Docker Compose services file
if [ ! -f docker-stack/docker-compose.yaml ]; then
    cp docker-stack/docker-compose.services.yaml docker-stack/docker-compose.yaml
    # Replace STACK_ID placeholder
    STACK_ID=$(grep "^STACK_ID=" docker-stack/.env | cut -d'=' -f2)
    sed -i "s/STACK_ID/${STACK_ID}/g" docker-stack/docker-compose.yaml
fi

# Set basic Git config only if not already set (non-interactive)
if ! git config --global user.name > /dev/null 2>&1; then
    git config --global user.name "Podium User"
fi
if ! git config --global user.email > /dev/null 2>&1; then
    git config --global user.email "user@localhost"
fi

# Set other Git defaults
git config --global mergetool.keepBackup false 2>/dev/null || true
git config --global init.defaultBranch main 2>/dev/null || true
git config --global pull.rebase false 2>/dev/null || true

echo "âœ… Basic configuration completed!"
echo ""
echo "ðŸ“‹ Next steps:"
echo "   1. Configure Git: git config --global user.name 'Your Name'"
echo "   2. Configure Git: git config --global user.email 'your@email.com'"
echo "   3. Set up GitHub: gh auth login"
echo "   4. Start services: podium start-services"
echo "   5. Create project: podium new"

echo ""
echo "ðŸŽ‰ Podium CLI has been installed and configured successfully!"
echo ""
echo "To get started:"
echo "  1. Log out and back in (or run: newgrp docker)"
echo "  2. Run: podium help"
echo "  3. Create your first project: podium new"
echo ""
echo "For more information, visit: https://github.com/CaneBayComputers/podium-cli"
echo ""

exit 0
